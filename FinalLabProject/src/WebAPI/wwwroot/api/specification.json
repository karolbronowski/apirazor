{
  "x-generator": "NSwag v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0))",
  "openapi": "3.0.0",
  "info": {
    "title": "FinalLabProject API",
    "version": "1.0.0"
  },
  "paths": {
    "/api/Users/register": {
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "PostApiUsersRegister",
        "requestBody": {
          "x-name": "registration",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "PostApiUsersLogin",
        "parameters": [
          {
            "name": "useCookies",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "useSessionCookies",
            "in": "query",
            "schema": {
              "type": "boolean",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "requestBody": {
          "x-name": "login",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users/refresh": {
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "PostApiUsersRefresh",
        "requestBody": {
          "x-name": "refreshRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshRequest"
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users/confirmEmail": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "GetApiUsersConfirmEmail",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          },
          {
            "name": "code",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 2
          },
          {
            "name": "changedEmail",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/Users/resendConfirmationEmail": {
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "PostApiUsersResendConfirmationEmail",
        "requestBody": {
          "x-name": "resendRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendConfirmationEmailRequest"
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": ""
          }
        }
      }
    },
    "/api/Users/forgotPassword": {
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "PostApiUsersForgotPassword",
        "requestBody": {
          "x-name": "resetRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordRequest"
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users/resetPassword": {
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "PostApiUsersResetPassword",
        "requestBody": {
          "x-name": "resetRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": ""
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Users/manage/2fa": {
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "PostApiUsersManage2fa",
        "requestBody": {
          "x-name": "tfaRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorRequest"
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": ""
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/Users/manage/info": {
      "get": {
        "tags": [
          "Users"
        ],
        "operationId": "GetApiUsersManageInfo",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": ""
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "post": {
        "tags": [
          "Users"
        ],
        "operationId": "PostApiUsersManageInfo",
        "requestBody": {
          "x-name": "infoRequest",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InfoRequest"
              }
            }
          },
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": ""
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/Artists": {
      "post": {
        "tags": [
          "Artists"
        ],
        "summary": "Creates a new artist account.",
        "operationId": "PostApiArtists",
        "requestBody": {
          "x-name": "command",
          "description": "The command containing artist creation data.\nValidation rules (see CreateArtistCommandValidator):\nName: Required, max 100 chars\nUsername: Required\nEmail: Required, valid email format\nPassword: Required if UserId is not provided, min 4 chars\nUserId: Must be null if Password is provided\nBio: Max 500 chars\nPayoutTier: Required",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateArtistCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "The ID of the newly created artist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Artists"
        ],
        "summary": "Retrieves a paginated list of artists.",
        "operationId": "GetArtistsWithPagination",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "PageSize",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "NameFilter",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of artist DTOs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListOfArtistDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/Artists/{id}": {
      "put": {
        "tags": [
          "Artists"
        ],
        "summary": "Updates an existing artist's information.",
        "operationId": "UpdateArtist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the artist to update.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "command",
          "description": "The command containing updated artist data. The ID in the command must match the route ID.\nValidation rules (see UpdateArtistCommandValidator):\nId: Required, must be greater than 0\nName: Max 100 chars (optional)\nBio: Max 500 chars (optional)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateArtistCommand"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "No content if successful; BadRequest if IDs do not match."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Artists"
        ],
        "summary": "Deletes an artist by ID.",
        "operationId": "DeleteArtist",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the artist to delete.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "No content if successful."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "get": {
        "tags": [
          "Artists"
        ],
        "summary": "Retrieves an artist by their unique ID.",
        "operationId": "GetArtistById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the artist to retrieve.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The artist DTO if found; otherwise, null.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ArtistDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/Artists/payout-tier/{id}": {
      "put": {
        "tags": [
          "Artists"
        ],
        "summary": "Updates the payout tier for a specific artist.",
        "operationId": "UpdateArtistPayoutTier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the artist whose payout tier is being updated.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "command",
          "description": "The command containing the new payout tier. The ArtistId in the command must match the route ID.\nValidation rules (see UpdateArtistPayoutTierCommandValidator):\nArtistId: Required, must be greater than 0\nPayoutTier: Required",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateArtistPayoutTierCommand"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "No content if successful; BadRequest if IDs do not match."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/Artists/by-name": {
      "get": {
        "tags": [
          "Artists"
        ],
        "summary": "Retrieves artists by their name.",
        "operationId": "GetArtistByName",
        "parameters": [
          {
            "name": "Name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "A list of artist DTOs matching the given name.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ArtistDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/Listeners": {
      "post": {
        "tags": [
          "Listeners"
        ],
        "summary": "Creates a new listener account.",
        "operationId": "PostApiListeners",
        "requestBody": {
          "x-name": "command",
          "description": "The command containing listener creation data.\nValidation rules (see CreateListenerCommandValidator):\nName: Required, max 100 chars\nUsername: Required\nEmail: Required, valid email format\nPassword: Required if UserId is not provided, min 4 chars\nUserId: Must be null if Password is provided",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateListenerCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "The ID of the newly created listener.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Listeners"
        ],
        "summary": "Retrieves a paginated list of listeners.",
        "operationId": "GetListenersWithPagination",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "PageSize",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "NameFilter",
            "in": "query",
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of listener DTOs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListOfListenerDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/Listeners/{id}": {
      "put": {
        "tags": [
          "Listeners"
        ],
        "summary": "Updates an existing listener's information.",
        "operationId": "UpdateListener",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the listener to update.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "command",
          "description": "The command containing updated listener data. The ID in the command must match the route ID.\nValidation rules (see UpdateListenerCommandValidator):\nId: Required, must be greater than 0\nName: Max 100 chars (optional)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateListenerCommand"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "No content if successful; BadRequest if IDs do not match."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Listeners"
        ],
        "summary": "Deletes a listener by ID.",
        "operationId": "DeleteListener",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the listener to delete.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "No content if successful."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/Listeners/favorite-song": {
      "put": {
        "tags": [
          "Listeners"
        ],
        "summary": "Updates the favorited song for a specific listener.",
        "operationId": "UpdateFavoritedSongListener",
        "requestBody": {
          "x-name": "command",
          "description": "The command containing the listener and song IDs and the favorite status.\nValidation rules (see UpdateFavoritedSongListenerCommandValidator):\nListenerId: Required, must be greater than 0\nSongId: Required, must be greater than 0",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFavoritedSongListenerCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "No content if successful."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/Listeners/by-username": {
      "get": {
        "tags": [
          "Listeners"
        ],
        "summary": "Retrieves a listener by their username.",
        "operationId": "GetListenerByUsername",
        "parameters": [
          {
            "name": "Username",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "nullable": true
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "The listener DTO if found; otherwise, null.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListenerDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/ListUsers/all": {
      "get": {
        "tags": [
          "ListUsers"
        ],
        "operationId": "GetApiListUsersAll",
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            }
          }
        }
      }
    },
    "/api/Songs": {
      "post": {
        "tags": [
          "Songs"
        ],
        "summary": "Creates a new song.",
        "operationId": "CreateSong",
        "requestBody": {
          "x-name": "command",
          "description": "The command containing song creation data.\nValidation rules (see CreateSongCommandValidator):\nTitle: Required, max 200 chars\nArtistId: Required, must be greater than 0",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSongCommand"
              }
            }
          },
          "required": true,
          "x-position": 1
        },
        "responses": {
          "200": {
            "description": "The ID of the newly created song.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "get": {
        "tags": [
          "Songs"
        ],
        "summary": "Retrieves a paginated list of songs.",
        "operationId": "GetSongsWithPagination",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "PageSize",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of song DTOs.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListOfSongDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/Songs/{id}": {
      "put": {
        "tags": [
          "Songs"
        ],
        "summary": "Updates an existing song's information.",
        "operationId": "UpdateSong",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the song to update.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "requestBody": {
          "x-name": "command",
          "description": "The command containing updated song data. The ID in the command must match the route ID.\nValidation rules (see UpdateSongCommandValidator):\nTitle: Max 200 chars (optional)\nArtistId: Must be greater than 0 if provided",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSongCommand"
              }
            }
          },
          "required": true,
          "x-position": 2
        },
        "responses": {
          "200": {
            "description": "No content if successful; BadRequest if IDs do not match."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Songs"
        ],
        "summary": "Deletes a song by ID.",
        "operationId": "DeleteSong",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the song to delete.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "No content if successful."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/Songs/play/{songId}": {
      "put": {
        "tags": [
          "Songs"
        ],
        "summary": "Increments the play count for a song.",
        "operationId": "PlaySong",
        "parameters": [
          {
            "name": "songId",
            "in": "path",
            "required": true,
            "description": "The ID of the song to play.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          }
        ],
        "responses": {
          "200": {
            "description": "No content if successful."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/api/Songs/by-artist": {
      "get": {
        "tags": [
          "Songs"
        ],
        "summary": "Retrieves a paginated list of songs for a specific artist.",
        "operationId": "GetArtistSongsWithPagination",
        "parameters": [
          {
            "name": "ArtistId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 1
          },
          {
            "name": "PageNumber",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 2
          },
          {
            "name": "PageSize",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "x-position": 3
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of song DTOs for the specified artist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedListOfSongDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "HttpValidationProblemDetails": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ProblemDetails"
          },
          {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "properties": {
              "errors": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ]
      },
      "ProblemDetails": {
        "type": "object",
        "additionalProperties": {
          "nullable": true
        },
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RegisterRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "AccessTokenResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "tokenType": {
            "type": "string"
          },
          "accessToken": {
            "type": "string"
          },
          "expiresIn": {
            "type": "integer",
            "format": "int64"
          },
          "refreshToken": {
            "type": "string"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "twoFactorCode": {
            "type": "string",
            "nullable": true
          },
          "twoFactorRecoveryCode": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "RefreshRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "refreshToken": {
            "type": "string"
          }
        }
      },
      "ResendConfirmationEmailRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "email": {
            "type": "string"
          }
        }
      },
      "ForgotPasswordRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "email": {
            "type": "string"
          }
        }
      },
      "ResetPasswordRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "email": {
            "type": "string"
          },
          "resetCode": {
            "type": "string"
          },
          "newPassword": {
            "type": "string"
          }
        }
      },
      "TwoFactorResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "sharedKey": {
            "type": "string"
          },
          "recoveryCodesLeft": {
            "type": "integer",
            "format": "int32"
          },
          "recoveryCodes": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "string"
            }
          },
          "isTwoFactorEnabled": {
            "type": "boolean"
          },
          "isMachineRemembered": {
            "type": "boolean"
          }
        }
      },
      "TwoFactorRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "enable": {
            "type": "boolean",
            "nullable": true
          },
          "twoFactorCode": {
            "type": "string",
            "nullable": true
          },
          "resetSharedKey": {
            "type": "boolean"
          },
          "resetRecoveryCodes": {
            "type": "boolean"
          },
          "forgetMachine": {
            "type": "boolean"
          }
        }
      },
      "InfoResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "email": {
            "type": "string"
          },
          "isEmailConfirmed": {
            "type": "boolean"
          }
        }
      },
      "InfoRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "newEmail": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "nullable": true
          },
          "oldPassword": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "CreateArtistCommand": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "bio": {
            "type": "string"
          },
          "payoutTier": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateArtistCommand": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateArtistPayoutTierCommand": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "artistId": {
            "type": "integer",
            "format": "int32"
          },
          "payoutTier": {
            "type": "string"
          }
        }
      },
      "ArtistDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "bio": {
            "type": "string"
          },
          "payoutTier": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "PaginatedListOfArtistDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ArtistDto"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "hasPreviousPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          }
        }
      },
      "CreateListenerCommand": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateListenerCommand": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "UpdateFavoritedSongListenerCommand": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "listenerId": {
            "type": "integer",
            "format": "int32"
          },
          "songId": {
            "type": "integer",
            "format": "int32"
          },
          "isFavorited": {
            "type": "boolean"
          }
        }
      },
      "PaginatedListOfListenerDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListenerDto"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "hasPreviousPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          }
        }
      },
      "ListenerDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "CreateSongCommand": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "title": {
            "type": "string"
          },
          "artistId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "UpdateSongCommand": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "artistId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        }
      },
      "PaginatedListOfSongDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SongDto"
            }
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "hasPreviousPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          }
        }
      },
      "SongDto": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "artistId": {
            "type": "integer",
            "format": "int32"
          },
          "listenedTimes": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "securitySchemes": {
      "JWT": {
        "type": "apiKey",
        "description": "Type into the textbox: Bearer {your JWT token}.",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "JWT": []
    }
  ]
}